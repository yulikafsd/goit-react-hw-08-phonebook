{"version":3,"file":"static/js/69.b6ce00d3.chunk.js","mappings":"kPAGaA,EAAQC,EAAAA,GAAAA,MAAH,2GAiBLC,GAVQD,EAAAA,GAAAA,MAAH,qIAUSA,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,gFAMXG,GAAcH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,0HAQXK,EAASL,EAAAA,GAAAA,OAAH,sU,4DClBbM,EAAgB,CACpBC,GAAI,GACJC,KAAM,GACNC,MAAO,GACPC,SAAU,IAoHZ,EAjHqB,WACnB,IAAMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAMlBG,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAqC1B,OACE,iCACE,SAACC,EAAA,EAAD,WACE,2CAEF,UAACC,EAAA,EAAD,CACEC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,UAAU,SACVC,MAAM,QACNC,GAAG,OACHC,GAAG,OARL,WAUE,2CACA,SAAC,KAAD,CACEzB,cAAeA,EACf0B,SAxCa,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UASxBC,EAAU,CACd3B,KAAMyB,EAAOzB,KAAK4B,OAClB3B,MAAOwB,EAAOxB,MAAM2B,OACpB1B,SAAUuB,EAAOvB,UAEnB2B,MAAM,aACNtB,GAASuB,EAAAA,EAAAA,IAASH,MAAcf,GAASc,GAK1C,EAqBOK,iBAAkBC,EAAAA,GAClBC,aAAa,MAJf,UAME,UAAC,KAAD,YACE,SAAC1C,EAAD,CAAO2C,QAAS/B,EAAhB,mBACA,SAACV,EAAD,CACE0C,KAAK,OACLnC,KAAK,OAGLoC,UAAQ,EACRrC,GAAII,EACJkC,YAAY,eAEd,SAAC1C,EAAD,CAAaK,KAAK,OAAOsC,UAAU,SACnC,SAAC/C,EAAD,CAAO2C,QAAS7B,EAAhB,oBACA,SAACZ,EAAD,CACE0C,KAAK,QACLnC,KAAK,QAGLoC,UAAQ,EACRrC,GAAIM,EACJgC,YAAY,yBAEd,SAAC1C,EAAD,CAAaK,KAAK,QAAQsC,UAAU,SACpC,SAAC/C,EAAD,CAAO2C,QAAS5B,EAAhB,uBACA,SAACb,EAAD,CACE0C,KAAK,WACLnC,KAAK,WAGLoC,UAAQ,EACRrC,GAAIO,KAEN,SAACX,EAAD,CAAaK,KAAK,WAAWsC,UAAU,SACvC,SAACzC,EAAD,CAAQsC,KAAK,SAASI,SAAwB,aAAd9B,EAAhC,SACiB,aAAdA,EAA2B,iBAAmB,uBAO5D,C","sources":["pages/register/Register.styled.js","pages/register/Register.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const Label = styled.label`\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  line-height: 1;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 236px;\n  line-height: 1;\n\n  &:last-of-type {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const StyledField = styled(Field)`\n  display: block;\n  width: 236px;\n  line-height: 1;\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  font-size: 10px;\n  font-style: italic;\n  text-align: left;\n  line-height: 1;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin: auto;\n  margin-bottom: 20px;\n  margin-top: 20px;\n  padding: 10px 20px;\n  min-width: 130px;\n  border: none;\n  border-radius: 25px;\n  color: #fff;\n  background-color: #00bcd5;\n  transition: all 250ms ease-in-out;\n\n  &:hover {\n    background-color: #00a6bc;\n  }\n`;\n","import { Formik, Form } from 'formik';\nimport { registerSchema } from 'constants/schema';\nimport { nanoid } from 'nanoid';\nimport {\n  Label,\n  StyledField,\n  StyledError,\n  Button,\n} from 'pages/register/Register.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { useState } from 'react';\nimport { selectError, selectOperation } from 'redux/contacts/selectors';\nimport { Box } from 'styles/Box';\nimport { register } from 'redux/auth/operations';\nimport { Helmet } from 'react-helmet';\n\nconst initialValues = {\n  id: '',\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegisterPage = () => {\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  // const [name, setName] = useState('');\n  // const [email, setEmail] = useState('');\n  // const [password, setPassword] = useState('');\n\n  const dispatch = useDispatch();\n  const operation = useSelector(selectOperation);\n  const error = useSelector(selectError);\n\n  // const handleChange = ({ target: { name, value } }) => {\n  //   switch (name) {\n  //     case 'name':\n  //       return setName(value);\n  //     case 'email':\n  //       return setEmail(value);\n  //     case 'password':\n  //       return setPassword(value);\n  //     default:\n  //       return;\n  //   }\n  // };\n\n  const handleSubmit = (values, { resetForm }) => {\n    //   const isContact = contacts.some(\n    //     contact =>\n    //       contact.name.toLowerCase() === values.name.toLowerCase().trim()\n    //   );\n    //   if (isContact) {\n    //     changeNameMessage(values.name);\n    //     return;\n    //   } else {\n    const newUser = {\n      name: values.name.trim(),\n      email: values.email.trim(),\n      password: values.password,\n    };\n    alert('register!');\n    dispatch(register(newUser)) && !error && resetForm();\n    // setName('');\n    // setEmail('');\n    // setPassword('');\n    // }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Register</title>\n      </Helmet>\n      <Box\n        pt={3}\n        pb={3}\n        pr={4}\n        pl={4}\n        textAlign=\"center\"\n        width=\"300px\"\n        ml=\"auto\"\n        mr=\"auto\"\n      >\n        <h1>Register Page</h1>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={registerSchema}\n          autoComplete=\"off\"\n        >\n          <Form>\n            <Label htmlFor={nameInputId}>Name</Label>\n            <StyledField\n              type=\"text\"\n              name=\"name\"\n              // value={name}\n              // onChange={handleChange}\n              required\n              id={nameInputId}\n              placeholder=\"Peter Pen\"\n            />\n            <StyledError name=\"name\" component=\"div\" />\n            <Label htmlFor={emailInputId}>Email</Label>\n            <StyledField\n              type=\"email\"\n              name=\"email\"\n              // value={email}\n              // onChange={handleChange}\n              required\n              id={emailInputId}\n              placeholder=\"your.mail@email.com\"\n            />\n            <StyledError name=\"email\" component=\"div\" />\n            <Label htmlFor={passwordInputId}>Password</Label>\n            <StyledField\n              type=\"password\"\n              name=\"password\"\n              // value={password}\n              // onChange={handleChange}\n              required\n              id={passwordInputId}\n            />\n            <StyledError name=\"password\" component=\"div\" />\n            <Button type=\"submit\" disabled={operation === 'register'}>\n              {operation === 'register' ? 'registering...' : 'Register'}\n            </Button>\n          </Form>\n        </Formik>\n      </Box>\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["Label","styled","StyledField","Field","StyledError","ErrorMessage","Button","initialValues","id","name","email","password","nameInputId","nanoid","emailInputId","passwordInputId","dispatch","useDispatch","operation","useSelector","selectOperation","error","selectError","Helmet","Box","pt","pb","pr","pl","textAlign","width","ml","mr","onSubmit","values","resetForm","newUser","trim","alert","register","validationSchema","registerSchema","autoComplete","htmlFor","type","required","placeholder","component","disabled"],"sourceRoot":""}